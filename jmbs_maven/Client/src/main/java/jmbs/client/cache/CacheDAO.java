/*
 * JMBS: Java Micro Blogging System
 *
 * Copyright (C) 2012  
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY.
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jmbs.client.cache;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;

/**
 * Contains all the possible ways to set a request to the db.
 * 
 */
public abstract class CacheDAO implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1746724303428703866L;
	protected Connection con = null;
	private PreparedStatement stmt = null;
	public static final int BY_NAME = 1;
	public static final int BY_FORNAME = 2;
	public static final int BY_BOTH = 3;

	public CacheDAO(Connection c) {
		con = c;
	}

	protected void closeStatement() {
		try {
			if (stmt != null) {
				stmt.close();
				stmt = null;
			}
		} catch (SQLException e) {
			System.err.println("Unable to close Statement !");
		}

	}

	protected ResultSet executeQuery() {
		ResultSet res = null;
		try {
			res = stmt.executeQuery();
			res.next();
		} catch (SQLException e) {
			//System.err.println("Unable to execute query.\n"+e.getMessage());
		}

		return res;
	}

	protected boolean executeUpdate() {
		boolean b;

		try {
			stmt.executeUpdate();
			b = true;
		} catch (SQLException e) {
			//System.err.println("Unable to execute query.\n"+e.getMessage());
			b = false;
		}

		return b;
	}

	public Connection getConnection() {
		return con;
	}

	protected ResultSet getGeneratedKeys() {
		ResultSet res = null;
		try {
			res = stmt.getGeneratedKeys();
			res.next();
		} catch (SQLException e) {
		}
		return res;
	}

	protected ResultSet send(String request) {

		ResultSet result;
		try {
			Statement state = con
					.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
							ResultSet.CONCUR_READ_ONLY);
			result = state.executeQuery(request);
			result.absolute(1);
		} catch (SQLException e) {
			if (e.getErrorCode() != 0)
				System.err
						.println("Unable set the connection to the database!/n");
			result = null;
		}
		return result;
	}

	protected void set(String request) {
		try {
			stmt = con.prepareStatement(request);
		} catch (SQLException e) {
			System.err.println("Unable to execute querry: " + request);

		}
	}

	protected void set(String request, int autoGeneratedKey) {
		try {
			stmt = con.prepareStatement(request, autoGeneratedKey);
		} catch (SQLException e) {
			System.err.println("Unable to execute querry: " + request);

		}
	}

	protected void setInt(int index, int i) {
		try {
			stmt.setInt(index, i);
		} catch (SQLException e) {
			System.err.println("Unable to set int: " + i);
		}
	}

	protected void setString(int index, String s) {
		try {
			stmt.setString(index, s);
		} catch (SQLException e) {
			System.err.println("Unable to set string: \"" + s + "\"");
		}
	}

	protected void setTimestamp(int index, Timestamp dt) {
		try {
			stmt.setTimestamp(index, dt);
		} catch (SQLException e) {
			System.err.println("Unable to set date: " + dt);
		}
	}

	protected void close(ResultSet rs) {
		try {
			rs.close();
		} catch (SQLException ex) {
			// Logger.getLogger(DAO.class.getName()).log(Level.SEVERE, null,
			// ex);
		}
	}
}
